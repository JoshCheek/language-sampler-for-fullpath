#!/usr/bin/env dart
import "dart:io";

main(List<String> args) {
  var cwd = Directory.current.path.toString();
  new Fullpath(args, cwd, stdin, stdout)();
}

class Fullpath {
  String helpScreen = """
usage: fullpath *[relative-paths] [-c]

  Prints the fullpath of the paths
  If no paths are given as args, it will read them from stdin

  If there is only one path, the trailing newline is omitted

  The -c flag will copy the results into your pasteboard
""";

  List<String>      args;
  String            cwd; // there is a directory class, but it isn't useful
  Stream<List<int>> instream;
  IOSink            outstream;
  bool              help = false;
  bool              copy = false;

  Fullpath(args, this.cwd, this.instream, this.outstream) {
    this.args = new List();
    args.forEach((arg) {
      if(arg == "-h" || arg == "--help")
        help = true;
      else if(arg == "-c" || arg == "--copy")
        copy = true;
      else
        this.args.add(arg);
    });
  }

  call() {
    if(help)
      outstream.write(helpScreen);
    else if(args.isNotEmpty)
      printPaths(filterBlanks(args));
    else
      instream
        .map((bytes) => new String.fromCharCodes(bytes)) // stupid `new` keyword -.-
        .map(split)
        .toList()
        .then(flatten)
        .then(filterBlanks)
        .then(printPaths);
  }

  filterBlanks(paths) => paths.toList(growable: true)
                             ..removeWhere((s) => s.isEmpty);

  printPaths(paths) {
    printPathsToStream(paths, outstream);
    if(copy) pbcopy((stream) {
      printPathsToStream(paths, stream);
    });
  }

  pbcopy(cb) => Process.start('pbcopy', []).then((process) {
    cb(process.stdin);
    process.stdin.close();
  });

  printPathsToStream(paths, stream) {
    if(paths.length == 1)
      stream.write(path(paths[0]));
    else
      paths.forEach((filename) => stream.write(path(filename)+"\n"));
  }

  path(filename) => "$cwd/$filename";
  split(str) => str.split(new RegExp(r"\n"));

  // Sigh, if there's a better way than this, I don't know what it is
  // I can't even use reduce b/c it doesn't take the inital argument
  // Also note that this does not actually flatten, it flattens one level only.
  flatten(lists) {
    var result = [];
    lists.forEach(result.addAll);
    return result;
  }
}
