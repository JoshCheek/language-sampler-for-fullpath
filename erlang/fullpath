#!/usr/bin/env escript
%% -*- erlang -*-
main(Args) ->
  {ok, Cwd} = file:get_cwd(),
  {DoCopy, RelativePaths} = parse_args(Args),
  if
    RelativePaths == [] ->
      Lines = readlines([]),
      Paths = filter_blanks(Lines);
    true ->
      Paths = filter_blanks(RelativePaths)
  end,

  % I have no idea what these options correspond to,
  % I just finally found an example that worked
  STDOUT = erlang:open_port({fd, 0, 1}, [out, {line, 256}]),
  if
    DoCopy ->
      Ports = [
        open_port({spawn, "/usr/bin/pbcopy"}, [stream, out, hide, exit_status]),
        STDOUT
      ];
    true ->
      Ports = [STDOUT]
  end,
  print_paths(Cwd, Paths, trailing_str(Paths), Ports),
  close_ports(Ports),
  init:stop().

close_ports([]) -> null;
close_ports([Port|Rest]) ->
  Port ! {self(), close},
  close_ports(Rest).

parse_args(Args) -> do_parse_args(Args, false, []).
do_parse_args([             ], Copy, Paths) -> {Copy, filter_blanks(lists:reverse(Paths))};
do_parse_args([    "-c"|Rest],    _, Paths) -> do_parse_args(Rest, true, Paths);
do_parse_args(["--copy"|Rest],    _, Paths) -> do_parse_args(Rest, true, Paths);
do_parse_args([    Path|Rest], Copy, Paths) -> do_parse_args(Rest, Copy, [Path|Paths]).


readlines(AlreadyRead) ->
  case strip_newline(io:get_line("")) of
    {error} -> lists:reverse(AlreadyRead);
    {ok, Line} -> readlines([Line|AlreadyRead])
  end.

strip_newline(eof)  -> {error};
strip_newline(Line) -> {ok, re:replace(Line, "\n$", "", [global,{return,list}])}.

filter_blanks([])          -> [];
filter_blanks([eof|Rest])  -> filter_blanks(Rest);
filter_blanks([""|Rest])   -> filter_blanks(Rest);
filter_blanks([Path|Rest]) -> [Path | filter_blanks(Rest)].

print_paths(_, [], _, _) ->
  null;
print_paths(Cwd, [Path|Rest], TrailingStr, Ports) ->
  ToPrint = io_lib:format("~s/~s~s", [Cwd, Path, TrailingStr]),
  print_path(ToPrint, Ports),
  print_paths(Cwd, Rest, TrailingStr, Ports).

print_path(_, []) -> null;
print_path(ToPrint, [Port|Ports]) ->
  Port ! {self(), {command, ToPrint}},
  print_path(ToPrint, Ports).

trailing_str([])  -> "";
trailing_str([_]) -> "";
trailing_str(_)   -> "\n".
