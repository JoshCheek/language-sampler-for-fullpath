#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname factorial -mnesia debug verbose
main(Args) ->
  {ok, Cwd} = file:get_cwd(),
  {_DoCopy, RelativePaths} = parse_args(Args),
  if
    RelativePaths == [] ->
      Lines = readlines([]),
      Paths = filter_blanks(Lines);
    true ->
      Paths = filter_blanks(RelativePaths)
  end,
  print_paths(Cwd, Paths, trailing_str(Paths)).

parse_args(Args) ->
  do_parse_args(Args, false, []).

do_parse_args([], DoCopy, RelativePaths) ->
  { DoCopy,
    filter_blanks(lists:reverse(RelativePaths))
  };
do_parse_args(["-c"|Rest], _DoCopy, RelativePaths) ->
  do_parse_args(Rest, true, RelativePaths);
do_parse_args([Path|Rest], DoCopy, RelativePaths) ->
  do_parse_args(Rest, DoCopy, [Path|RelativePaths]).


readlines(AlreadyRead) ->
  case strip_newline(io:get_line("")) of
    {error} -> lists:reverse(AlreadyRead);
    {ok, Line} -> readlines([Line|AlreadyRead])
  end.

strip_newline(eof)  -> {error};
strip_newline(Line) -> {ok, re:replace(Line, "\n$", "", [global,{return,list}])}.

filter_blanks([])          -> [];
filter_blanks([eof|Rest])  -> filter_blanks(Rest);
filter_blanks([""|Rest])   -> filter_blanks(Rest);
filter_blanks([Path|Rest]) -> [Path | filter_blanks(Rest)].

print_paths(_, [], _) ->
  init:stop();
print_paths(Cwd, [Path|Rest], Nl) ->
  print_path(Cwd, Path, Nl),
  print_paths(Cwd, Rest, Nl).

print_path(Cwd, Path, TrailingStr) ->
  io:format("~s/~s~s", [Cwd, Path, TrailingStr]).

trailing_str([])  -> "";
trailing_str([_]) -> "";
trailing_str(_)   -> "\n".
