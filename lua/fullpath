#!/usr/bin/env lua

local lfs   = require("lfs")
local posix = require("posix")

local cwd = lfs.currentdir()
local sep = "/"

-- taken and modified from https://stackoverflow.com/questions/1242572/how-do-you-construct-a-read-write-pipe-with-lua
function popen3(path)
  local r1, w1 = posix.pipe()
  local r2, w2 = posix.pipe()
  local r3, w3 = posix.pipe()

  assert((w1 ~= nil and r2 ~= nil and r3 ~= nil), "pipe() failed")

  local pid, err = posix.fork()
  assert(pid ~= nil, "fork() failed")
  if pid == 0 then
    posix.close(w1)
    posix.close(r2)
    posix.dup2(r1, posix.fileno(io.stdin))
    posix.dup2(w2, posix.fileno(io.stdout))
    posix.dup2(w3, posix.fileno(io.stderr))
    posix.close(r1)
    posix.close(w2)
    posix.close(w3)

    local ret, err = posix.execp(path)
    assert(ret ~= nil, "execp() failed")

    posix._exit(1)
    return
  end

  posix.close(r1)
  posix.close(w2)
  posix.close(w3)

  return pid, w1, r2, r3
end


local function join(dir, entry)
  return dir .. sep .. entry
end

local function getEach(table)
  local element
  local getter, constant, state = ipairs(table)
  return function()
    state, element = getter(constant, state)
    return element
  end
end

function printEach(eachFilename, streams)
  local i = 0
  for entry in eachFilename do
    if entry ~= "" then
      i = i + 1
      for _, stream in pairs(streams) do
        if i == 2 then stream.write("\n") end
        stream.write(join(cwd, entry))
        if i ~= 1 then stream.write("\n") end
      end
    end
  end
end

local filenames, streams, children = {}, {io}, {}
for i, arg in ipairs(arg) do
  if arg == "-h" or arg == "--help" then
    print("usage: fullpath *[relative-paths] [-c]")
    print()
    print("  Prints the fullpath of the paths")
    print("  If no paths are given as args, it will read them from stdin")
    print()
    print("  If there is only one path, the trailing newline is omitted")
    print()
    print("  The -c flag will copy the results into your pasteboard")
  elseif arg == "-c" or arg == "--copy" then
    local pid, w, r, e = popen3("pbcopy")
    local process = {pid = pid, w = w, r = r, e = e }
    function process.write(str)
      posix.write(w, str)
    end
    table.insert(streams, process)
    table.insert(children, process)
  else
    table.insert(filenames, arg)
  end
end

if #filenames == 0 then
  printEach(io.lines(), streams)
else
  printEach(getEach(filenames), streams)
end

for _, child in ipairs(children) do
  posix.close(child.w)
  posix.wait(child.pid)
end
