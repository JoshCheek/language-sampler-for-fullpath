#!/usr/bin/env bash
set -eu
set -o pipefail

# parse args
doHelp=false
doCopy=false
paths=()
for arg in "$@"; do
  case "$arg" in
  -h) ;& --help) doHelp=true;;
  -c) ;& --copy) doCopy=true;;
  ?*)            paths+=("$arg");;
  esac
done

# Print help and quit
if $doHelp; then
  echo 'usage: fullpath *[relative-paths] [-c]'
  echo
  echo '  Prints the fullpath of the paths'
  echo '  If no paths are given as args, it will read them from stdin'
  echo
  echo '  If there is only one path, the trailing newline is omitted'
  echo
  echo '  The -c flag will copy the results into your pasteboard'
  exit 0
fi

# Read from stdin if no paths in argv
if [[ 0 == "${#paths[@]}" ]]; then
  paths=()
  while true; do
    # read the line, regardless of whether there is a newline at the end
    set +e
    read line
    newline_status=$?
    set -e

    # add nonempty lines to the set of paths
    if [[ "$line" != "" ]]; then
      paths+=("$line")
    fi

    # quit if there was no trailing newline on the last read
    if [[ "$newline_status" != 0 ]]; then
      break
    fi
  done
fi

# Print / copy the paths
print_paths () {
  if [[ 1 == "$#" ]]; then
    echo -n "${PWD}/${paths[0]}"
  else
    for path in "$@"; do
      echo "${PWD}/${path}"
    done
  fi
}

copy_program() {
  if which pbcopy >/dev/null; then
    echo pbcopy
  else
    echo xclip
  fi
}

if $doCopy; then
  print_paths "${paths[@]}" | "$(copy_program)"
fi
print_paths "${paths[@]}"
