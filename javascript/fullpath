#!/usr/bin/env node
"use strict"

const spawn          = require('child_process').spawn
const helpScreen     = "usage: fullpath *[relative-paths] [-c]\n"+
                       "\n"+
                       "  Prints the fullpath of the paths\n"+
                       "  If no paths are given as args, it will read them from stdin\n"+
                       "\n"+
                       "  If there is only one path, the trailing newline is omitted\n"+
                       "\n"+
                       "  The -c flag will copy the results into your pasteboard\n"

main(process.argv, process.stdin, process.stdout, process.cwd())

function removeFlags(array)         { return array.filter(string => string[0] != "-"[0]) }
function hasFlag(strings, flag)     { return -1 != strings.indexOf(flag) }
function normalizePaths(cwd, paths) { return paths.filter(p => "" != p).map(p => [cwd, p].join("/")) }

function printPaths(stream, paths) {
  if(paths.length === 1) stream.write(paths[0])
  else paths.forEach(p => stream.write(`${p}\n`))
}

function copyPaths(callback) {
  const pbcopy = spawn("pbcopy", [], {stdio: ["pipe", "inherit", "inherit"]})
  callback(pbcopy.stdin)
  pbcopy.stdin.end()
}

function readLines(instream, callback) {
  let stdinData = ""
  instream.on('data',  (data) => stdinData += data)
  instream.on('close', () => callback(stdinData.split("\n")))
}

function main(argv, stdin, stdout, cwd) {
  const args         = argv.slice(2)
  const argvPaths    = removeFlags(args)
  const doHelp       = hasFlag(args, "-h") || hasFlag(args, "--help")
  const doCopy       = hasFlag(args, "-c") || hasFlag(args, "--copy")
  const pathsOnStdin = 0 == argvPaths.length
  const output       = function(relativePaths) {
    const absolutePaths = normalizePaths(cwd, relativePaths)
    printPaths(stdout, absolutePaths)
    doCopy && copyPaths(stream => printPaths(stream, absolutePaths))
  }
  doHelp ? stdout.write(helpScreen) : pathsOnStdin ? readLines(stdin, output) : output(argvPaths)
}
