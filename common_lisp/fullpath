#!/usr/bin/env sbcl --script

(defun does-include (needle haystack)
  (find needle haystack :test #'equal))

(defun has-help (args)
  (or (does-include "-h"     args)
      (does-include "--help" args)))

(defun has-copy (args)
  (or (does-include "-c"     args)
      (does-include "--copy" args)))

(defun is-empty (list)
  (eq 0 (list-length list)))

(defun join (list delimiter)
  (if (is-empty list)
      ""
      (format nil "~a~a~a"
              (first list)
              delimiter
              (join (rest list) delimiter))))

(defun help-screen ()
  (join '("usage: fullpath *[relative-paths] [-c]"
          ""
          "  Prints the fullpath of the paths"
          "  If no paths are given as args, it will read them from stdin"
          ""
          "  If there is only one path, the trailing newline is omitted"
          ""
          "  The -c flag will copy the results into your pasteboard")
        #\linefeed))

(defun is-arg (maybe-arg)
  (if (not (eq 0 (length maybe-arg)))
      (eq #\- (char maybe-arg 0))))

(defun is-blank (maybe-blank)
  (eq 0 (length maybe-blank)))

(defun remove-flags (args)
  (remove-if 'is-arg args))

(defun remove-blank (args)
  (remove-if 'is-blank args))

(defun absolute-pathname (relative-path)
  (namestring
    (merge-pathnames
      (make-pathname :name relative-path)
      (truename "."))))

(defun expand-paths (paths)
  (map 'list
       'absolute-pathname
       paths))

(defun paths-from (args stdin)
  (let ((arg-paths (remove-flags args)))
    (expand-paths (remove-blank
                    (if (is-empty arg-paths)
                        (readlines stdin)
                        arg-paths)))))

(defun format-paths (paths)
  (join paths #\linefeed))

(defun copy-to-pasteboard (string)
                    )

(if (has-help *posix-argv*)
    (format t (help-screen))
    (let* ((do-copy  (has-copy *posix-argv*))
           (paths    (paths-from (rest *posix-argv*) *standard-input*))
           (to-print (format-paths paths)))
      (if do-copy (copy-to-pasteboard to-print))
      (princ to-print)))

; remove blank lines from paths

; to_print = for each path
;   expand it
;   join with newlines

; if there is more than one path
;   append a newline to to_print

; if do_copy is true
;   pass it as stdin to pbcopy

; print to_print
